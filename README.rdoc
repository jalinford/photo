This is a simple app built for displaying photos built with Foundation 4, ActiveAdmin, CarrierWave, and MiniMagick. Through active admin, you can upload your photos and tag them. Then a website visitor can scan through all the photos, and look at beautiful slideshows of specific tags. All photos currently sorted by reverse date order.

Sample of the photo slideshow application with Foundation 4
http://shielded-castle-9736.herokuapp.com/ 


$ rails new photos

$ cd photos

in Gemfile (after rails gem)
gem 'activeadmin'
gem "carrierwave"
gem "mini_magick"

# Gems used only for assets and not required
# in production environments by default.
group :assets do
  gem 'sass-rails',   '~> 3.2.3'
  gem 'coffee-rails', '~> 3.2.1'

  # See https://github.com/sstephenson/execjs#readme for more supported runtimes
  # gem 'therubyracer', :platforms => :ruby

  gem 'uglifier', '>= 1.0.3'
  gem 'zurb-foundation'
end

gem "jquery-rails", "2.3.0"

group :development do
  gem 'sqlite3'
  gem 'rspec-rails', '~> 2.0'
end

group :test do
  gem 'sqlite3'
  gem 'rspec-rails', '~> 2.0'
end

group :production do
  gem 'pg'
end

$ bundle install

$ rails g foundation:install

$ git init
$ git add .
$ git commit -m 'First Commit'
$ rails generate controller main index
$ rails g controller photos index slideshow

delete rails welcome file (index) in public

In Routes:
root :to => 'main#index'
match 'photos', :to => "photos#index"

$ rails g active_admin:install
$ rake db:migrate

Check if ActiveAdmin works, sign in with admin@example.com/password

(Double check that root is above ActiveAdmin in Gemfile)

Partial for App Layouts - _header
In layouts: 

<header><%= render 'layouts/header' %></header>

<nav class="top-bar">
  <ul class="title-area">
    <li class="name">
      <h1><%= link_to "Example Photo Slideshows", root_path %></h1>
    </li>
    <li class="toggle-topbar menu-icon"><a href="#"><span>Menu</span></a></li>
  </ul>
  <section class="top-bar-section">
    <ul class="right">
      <li class="divider"></li>
      <li><%= link_to "Home", root_path %></li>
      <li class="divider"></li>
      <li><%= link_to "Photos", photos_path %></li>
    </ul>
  </section>
</nav>

$ git commit -am 'Second Commit'

$ rails g uploader photo

$ rails g model Photo title:string photo:string date:date description:text

Change model to:
class Photo < ActiveRecord::Base
  attr_accessible :date, :description, :photo, :title, :remote_image_url
  validates_presence_of :title, :date
  mount_uploader :photo, PhotoUploader
  scope :ordered, order("date DESC")
end


$ rails g active_admin:resource photo

$ rake db:migrate

Restart rails s

*Check how it looks in ActiveAdmin. If good - commit


add to photo_uploader

  # This is supposed to enable Heroku uploading
  def cache_dir
    "#{Rails.root}/tmp/uploads"
  end

  def is_landscape?(new_file)
    image = ::MiniMagick::Image::read(File.binread(@file.file))
    image[:width] > image[:height]
  end

  version :thumb do
    process :resize_to_fill => [200, 200, gravity = 'Center']
  end

  version :slideshow do
    process :resize_to_fill => [1020, 680, gravity = 'Center'], if: :is_landscape?
    process :resize_and_pad => [1020, 680, background=:transparent, gravity = 'Center']
  end

  def extension_white_list
    %w(jpg jpeg gif png)
  end

$ git add .
$ git commit -m "carrier wave added"


  def index
    @photos = Photo.order("date DESC")
  end

For Index view
<h1>All of the Slideshows</h1>
<p>A collection of photos</p>
<% if @photos.count > 0 %>
  <div class="large-8 columns">
    <div class="row">
      <% @photos.first(4).each do |photo| %>
        <div class="large-4 small-6 columns text-center">
          <%= image_tag photo.photo_url(:thumb).to_s %>
          <div class="panel">
            <h6><%= photo.title %></h6>
          </div>
        </div>
      <% end %>
    </div>
  </div>
<% end %>

*Check to see if it works!

$ rails g model PhotoSlideshow photo_id:integer slideshow_id:integer
$ rails g model Slideshow title:string description:text featured:boolean priority:integer

$ rails g active_admin:resource slideshow

$ rake db:migrate

modify the models:

class PhotoSlideshow < ActiveRecord::Base
  attr_accessible :photo_id, :slideshow_id
  belongs_to :photo
  belongs_to :slideshow
end

class Slideshow<ActiveRecord::Base
  attr_accessible :priority, :title, :description, :featured, :priority, :photo_ids
  validates_presence_of :title, :priority
  validates_uniqueness_of :title
  has_many :photo_slideshows, :dependent => :destroy
  has_many :photos, :through => :photo_slideshows
  accepts_nested_attributes_for :photos
  scope :ordered, order("priority DESC")
end

class Photo < ActiveRecord::Base
  attr_accessible :date, :description, :photo, :title, :remote_image_url, :slideshow_ids
  validates_presence_of :title, :date
  has_many :photo_slideshows, :dependent => :destroy
  has_many :slideshows, :through => :photo_slideshows
  mount_uploader :photo, PhotoUploader
  accepts_nested_attributes_for :slideshows
  scope :ordered, order("date DESC")
end

Modify the ActiveAdmin views: RemoteImageURL?

ActiveAdmin.register Photo do

  menu :parent => "Photos"

  index do                            
    column :title
    column :date
    column :description.slice(0, 100)
    column("Slideshows") do |photo|
      a_array = Array.new
      photo.slideshows.each do |slideshow|
        a_array.push(slideshow.title)
      end
      a_array.join(", ").slice(0, 100)
    end
    default_actions                   
  end     

  form do |f|                         
  f.inputs "Activity Details" do       
    f.input :title              
    f.input :date        
    f.input :photo
    f.input :slideshows, :as => :check_boxes
    f.input :description
  end                               
  f.actions                         
  end

  show do
    attributes_table do
      row :title
      row :date
      row :photo
      row :description
      panel("Slideshows") do
        table_for photo.slideshows do |slideshow|
          column :title
          column :description
        end
      end
    end
    active_admin_comments
  end

end

ActiveAdmin.register Slideshow do

  menu :parent => "Photos"

  index do                            
    column :title
    column :priority
    column :description.slice(0, 100)
    column :featured
    default_actions                   
  end     

  form do |f|                         
  f.inputs "Activity Details" do       
    f.input :title              
    f.input :featured, :as => :radio        
    f.input :priority, :as => :select, :collection => 1..10
    f.input :description
  end                               
  f.actions                         
  end

   show do
    attributes_table do
      row :title
      row :featured
      row :priority
      row :description
    end
    active_admin_comments
  end
end



Modify the controllers and instance variables

class PhotosController < InheritedResources::Base
  def index
    @photos = Photo.order("date DESC")
    @slideshows = Slideshow.order("priority DESC")
    @featured_slideshows = Slideshow.where(featured: true).order("title ASC")
  end

  def slideshow
    @slideshow = Slideshow.find_by_title(params[:title])
    @photos = @slideshow.photos
    @featured_slideshows = Slideshow.where(featured: true).order("title ASC")
  end 
end

Modify the routes:

  match '/photos/:title', :to => "photos#slideshow", as: 'slideshow'

  resources :photos do
    resource :slideshow
  end

Modify the views:

For photos/index:

<h1>All of the Slideshows</h1>
<p>A collection of photos</p>

<% if @photos.count > 0 %>
<% @slideshows.each do |slideshow| %>
<h2><%= slideshow.title %> Photos</h2>
  <div class="large-8 columns">
    <div class="row">
      <% slideshow.photos.first(4).each do |photo| %>
        <div class="large-4 small-6 columns text-center">
          <%= image_tag photo.photo_url(:thumb).to_s %>
          <div class="panel">
            <h6><%= photo.title %></h6>
          </div>
        </div>
      <% end %>
    </div>
  </div>
<a href="<%= slideshow_path(:title => slideshow.title) %>" class="button round">View All as Slideshow</a>
<% end %>
<% end %>

photos/slideshow

<h1><%= @slideshow.title %></h1>
<p><%= @slideshow.description %></p>
<div class="row">
  <div class="small-11 small-centered columns">
<div class="slideshow-wrapper">
  <div class="preloader"></div>
<ul data-orbit>
  <% @photos.each do |photo| %>
  <li>
    <%= image_tag photo.photo_url(:slideshow).to_s %>
    <div class="orbit-caption"><%= photo.title %><%= ": " + photo.description  unless photo.description == "" %></div>
  </li>
  <% end %>
</ul>
</div>
</div>
</div>

Fix header with drop down: 
note add @featured_slideshows to all controllers as
@featured_slideshows = Slideshow.where(featured: true).order("title ASC")

<nav class="top-bar">
  <ul class="title-area">
    <li class="name">
      <h1><%= link_to "Example Photo Slideshows", root_path %></h1>
    </li>
    <li class="toggle-topbar menu-icon"><a href="#"><span>Menu</span></a></li>
  </ul>
  <section class="top-bar-section">
    <ul class="right">
      <li class="divider"></li>
      <li><%= link_to "Home", root_path %></li>
<li class="divider"></li>
      <li class="has-dropdown"><a href="#">Photos</a>
        <ul class="dropdown">
          <li><%= link_to "All Photos", photos_path %></li>
          <li><label>Featured Slideshows</label></li>
          <% @featured_slideshows.each do |slideshow| %>
            <li><%= link_to slideshow.title, slideshow_path(:title => slideshow.title) %></li>
          <% end %>
        </ul>
      </li>
    </ul>
  </section>
</nav>

Before deploying to Heroku, add to config/app